name: Generate and Publish Presentation

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install marked@4.3.0 @material/typography@14.0.0 axios@0.21.1

      - name: Generate HTML
        run: |
          node << EOF
          const fs = require('fs');
          const marked = require('marked');
          const axios = require('axios');
          const path = require('path');

          async function fetchAndSaveExternalContent(url, baseDir) {
            try {
              const response = await axios.get(url);
              const content = response.data;
              const fileName = path.basename(url);
              const filePath = path.join(baseDir, fileName);
              fs.writeFileSync(filePath, content);
              return filePath;
            } catch (error) {
              console.error(`Error fetching ${url}: ${error.message}`);
              return null;
            }
          }

          async function processMarkdown(mdContent, baseDir) {
            const linkRegex = /\[([^\]]+)\]\(([^)]+)\)/g;
            let match;
            let processedContent = mdContent;

            while ((match = linkRegex.exec(mdContent)) !== null) {
              const [fullMatch, linkText, url] = match;
              if (url.startsWith('http')) {
                const savedFilePath = await fetchAndSaveExternalContent(url, baseDir);
                if (savedFilePath) {
                  const relativePath = path.relative(baseDir, savedFilePath);
                  processedContent = processedContent.replace(fullMatch, `[${linkText}](\${relativePath})`);
                }
              }
            }

            return processedContent;
          }

          async function generateHTML() {
            const baseDir = '.';
            const mdContent = fs.readFileSync('PRESENTATION.md', 'utf-8');
            const processedContent = await processMarkdown(mdContent, baseDir);
            const htmlContent = marked.parse(processedContent);

            const styledHtml = \`
            <!DOCTYPE html>
            <html lang="en">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>AI Presentation</title>
              <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap">
              <style>
                body {
                  font-family: 'Roboto', sans-serif;
                  line-height: 1.6;
                  color: rgba(0, 0, 0, 0.87);
                  margin: 0;
                  padding: 20px;
                  background-color: #f5f5f5;
                }
                .container {
                  max-width: 800px;
                  margin: 0 auto;
                  background-color: white;
                  padding: 40px;
                  border-radius: 4px;
                  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }
                h1 { font-size: 2.5rem; font-weight: 400; }
                h2 { font-size: 2rem; font-weight: 400; }
                h3 { font-size: 1.75rem; font-weight: 400; }
                h4 { font-size: 1.5rem; font-weight: 400; }
                p { font-size: 1rem; }
                ul, ol { padding-left: 20px; }
                code {
                  background-color: #f5f5f5;
                  padding: 2px 4px;
                  border-radius: 4px;
                  font-family: monospace;
                }
              </style>
            </head>
            <body>
              <div class="container">
                \${htmlContent}
              </div>
            </body>
            </html>
            \`;

            fs.writeFileSync('index.html', styledHtml);
          }

          generateHTML().catch(console.error);
          EOF

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          publish_branch: gh-pages
